@using BankId.Merchant.Library

@model BankId.Merchant.Library.SampleWebsite.Models.StatusModel

@{
    ViewBag.Title = "Response";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Func<dynamic, object> attributeStatementsTemplate = @<pre>@item.Name = @item.Value</pre>;

}

<h2>Response</h2>
<hr />
<div class="row">
    <form class="form-horizontal" method="post" role="form">
        <div class="form-group">
            <div class="col-xs-5">
                @Html.Label("BankId.Acquirer.StatusUrl", "BankId.Acquirer.StatusUrl")
                @Html.TextBoxFor(m => m.StatusUrl, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-3">
                @Html.Label("TransactionId", "TransactionId")
                @Html.TextBoxFor(m => m.TransactionId, new { @class = "form-control" })
            </div>
        </div>
        <button type="button" class="btn btn-danger" data-bs-toggle="collapse" data-bs-target="#demo">Toggle more options</button>
        <div id="demo" class="collapse">
            <div class="form-group">
                <div class="col-xs-3">
                    @Html.Label("BankId.Merchant.MerchantID", "BankId.Merchant.MerchantID")
                    @Html.TextBoxFor(m => m.MerchantId, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-3">
                    @Html.Label("BankId.Merchant.SubID", "BankId.Merchant.SubID")
                    @Html.TextBoxFor(m => m.SubId, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-xs-3">
                    @Html.Label("BankId.Merchant.ReturnUrl", "BankId.Merchant.ReturnUrl")
                    @Html.TextBoxFor(m => m.ReturnUrl, new { @class = "form-control" })
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Send response request</button>
    </form>
</div>
<hr />

@if (!String.IsNullOrEmpty(Model.CustomError))
{
    <div class="row alert alert-danger" role="alert">
        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
        <p>Custom error: @Model.CustomError</p><br />
    </div>
}


@if (Model.Source != null && Model.Source.IsError)
{
    <div class="row alert alert-danger" role="alert">
        <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>

        Error performing request: <br />
        <br />
        @if (!string.IsNullOrEmpty(Model.Source.Error.ErrorCode))
        {
            <text>Code: @Model.Source.Error.ErrorCode<br /></text>
        }
        @if (!string.IsNullOrEmpty(Model.Source.Error.ErrorMessage))
        {
            <text>Message: @Model.Source.Error.ErrorMessage<br /></text>
        }
        @if (!string.IsNullOrEmpty(Model.Source.Error.ErrorDetails))
        {
            <text>Details: @Model.Source.Error.ErrorDetails<br /></text>
        }
        @if (!string.IsNullOrEmpty(Model.Source.Error.ConsumerMessage))
        {
            <text>Consumer message: @Model.Source.Error.ConsumerMessage<br /></text>
        }
        @if (!string.IsNullOrEmpty(Model.Source.Error.SuggestedAction))
        {
            <text>Code: @Model.Source.Error.SuggestedAction<br /></text>
        }

        @if (Model.Source.Error.AdditionalInformation != null)
        {
            <p>SAML additional information:</p><br />
            <br />
            <p>Status Code 1: @Model.Source.Error.AdditionalInformation.StatusCodeFirstLevel</p><br />
            <p>Status Code 2: @Model.Source.Error.AdditionalInformation.StatusCodeSecondLevel</p><br />
            <p>Status Message: @Model.Source.Error.AdditionalInformation.StatusMessage</p><br />
        }
    </div>
}
@if (Model.Source != null && !Model.Source.IsError)
{
    <div class="container">
        <p>Status Codes:</p>

        <div class="row">
            <div class="col-12">
                <pre>StatusCodeFirstLevel = @Model.Source.SamlResponse.Status.StatusCodeFirstLevel </pre>
            </div>
            <div class="col-12">
                <pre>StatusCodeSecondLevel = @Model.Source.SamlResponse.Status.StatusCodeSecondLevel</pre>
            </div>
        </div>
        <p>Status Date Timestamp:</p>
        <div class="row">
            <div class="col-12">
                <pre>StatusCodeFirstLevel = @Model.Source.StatusDateTimestamp</pre>
            </div>
        </div>
        <hr />
        <p>Attributes:</p>
        
        <div class="row">
            @if (Model.Source.SamlResponse != null && Model.Source.SamlResponse.AttributeStatements.Count > 0)
            {
                @foreach (var attribute in Model.Source.SamlResponse.AttributeStatements)
                {
                    <div class="col-12">
                        @attributeStatementsTemplate(@attribute)
                    </div>
                }
            }
        </div>
        <hr />
        <div class="row">
            <textarea readonly="true" class="form-control" rows="10">@Model.Source.RawMessage</textarea>
        </div>
    </div>
}