// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.19522 Microsoft Reciprocal License (Ms-RL) 
//    <NameSpace>BankId.Merchant.Library.Xml.Schemas.Saml.AuthContext</NameSpace><Collection>Array</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>True</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BankId.Merchant.Library.Xml.Schemas.Saml.AuthContext {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("AuthenticationContextDeclaration", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class AuthnContextDeclarationBaseType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private IdentificationType identificationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TechnicalProtectionBaseType technicalProtectionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private OperationalProtectionType operationalProtectionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AuthnMethodBaseType authnMethodField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GoverningAgreementRefType[] governingAgreementsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public IdentificationType Identification {
            get {
                return this.identificationField;
            }
            set {
                this.identificationField = value;
            }
        }
        
        public TechnicalProtectionBaseType TechnicalProtection {
            get {
                return this.technicalProtectionField;
            }
            set {
                this.technicalProtectionField = value;
            }
        }
        
        public OperationalProtectionType OperationalProtection {
            get {
                return this.operationalProtectionField;
            }
            set {
                this.operationalProtectionField = value;
            }
        }
        
        public AuthnMethodBaseType AuthnMethod {
            get {
                return this.authnMethodField;
            }
            set {
                this.authnMethodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("GoverningAgreementRef", IsNullable=false)]
        public GoverningAgreementRefType[] GoverningAgreements {
            get {
                return this.governingAgreementsField;
            }
            set {
                this.governingAgreementsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AuthnContextDeclarationBaseType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AuthnContextDeclarationBaseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AuthnContextDeclarationBaseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AuthnContextDeclarationBaseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AuthnContextDeclarationBaseType obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthnContextDeclarationBaseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AuthnContextDeclarationBaseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AuthnContextDeclarationBaseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AuthnContextDeclarationBaseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("Identification", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class IdentificationType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PhysicalVerification physicalVerificationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] writtenConsentField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GoverningAgreementRefType[] governingAgreementsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private nymType nymField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool nymFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PhysicalVerification PhysicalVerification {
            get {
                return this.physicalVerificationField;
            }
            set {
                this.physicalVerificationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] WrittenConsent {
            get {
                return this.writtenConsentField;
            }
            set {
                this.writtenConsentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("GoverningAgreementRef", IsNullable=false)]
        public GoverningAgreementRefType[] GoverningAgreements {
            get {
                return this.governingAgreementsField;
            }
            set {
                this.governingAgreementsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public nymType nym {
            get {
                return this.nymField;
            }
            set {
                this.nymField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nymSpecified {
            get {
                return this.nymFieldSpecified;
            }
            set {
                this.nymFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IdentificationType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IdentificationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an IdentificationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IdentificationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IdentificationType obj, out System.Exception exception) {
            exception = null;
            obj = default(IdentificationType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out IdentificationType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static IdentificationType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((IdentificationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    /// <summary>
    /// This element indicates that identification has been
    /// performed in a physical
    /// face-to-face meeting with the principal and not in an
    /// online manner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class PhysicalVerification {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PhysicalVerificationCredentialLevel credentialLevelField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool credentialLevelFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public PhysicalVerificationCredentialLevel credentialLevel {
            get {
                return this.credentialLevelField;
            }
            set {
                this.credentialLevelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool credentialLevelSpecified {
            get {
                return this.credentialLevelFieldSpecified;
            }
            set {
                this.credentialLevelFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PhysicalVerification));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhysicalVerification object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PhysicalVerification object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhysicalVerification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PhysicalVerification obj, out System.Exception exception) {
            exception = null;
            obj = default(PhysicalVerification);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PhysicalVerification obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PhysicalVerification Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PhysicalVerification)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    public enum PhysicalVerificationCredentialLevel {
        
        /// <remarks/>
        primary,
        
        /// <remarks/>
        secondary,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("AuthenticatorTransportProtocol", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class AuthenticatorTransportProtocolType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionOnlyType itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ItemChoiceType itemElementNameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ADSL", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("HTTP", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("IPSec", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("ISDN", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("MobileNetworkEndToEndEncryption", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("MobileNetworkNoEncryption", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("MobileNetworkRadioEncryption", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("PSTN", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("SSL", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlElementAttribute("WTLS", typeof(ExtensionOnlyType))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public ExtensionOnlyType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AuthenticatorTransportProtocolType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AuthenticatorTransportProtocolType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AuthenticatorTransportProtocolType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AuthenticatorTransportProtocolType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AuthenticatorTransportProtocolType obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthenticatorTransportProtocolType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AuthenticatorTransportProtocolType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AuthenticatorTransportProtocolType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AuthenticatorTransportProtocolType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("WrittenConsent", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ExtensionOnlyType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ExtensionOnlyType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ExtensionOnlyType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ExtensionOnlyType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ExtensionOnlyType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ExtensionOnlyType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtensionOnlyType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ExtensionOnlyType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ExtensionOnlyType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ExtensionOnlyType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("Extension", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ExtensionType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Xml.XmlElement[] anyField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ExtensionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ExtensionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ExtensionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ExtensionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ExtensionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtensionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ExtensionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ExtensionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ExtensionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac", IncludeInSchema=false)]
    public enum ItemChoiceType {
        
        /// <remarks/>
        ADSL,
        
        /// <remarks/>
        HTTP,
        
        /// <remarks/>
        IPSec,
        
        /// <remarks/>
        ISDN,
        
        /// <remarks/>
        MobileNetworkEndToEndEncryption,
        
        /// <remarks/>
        MobileNetworkNoEncryption,
        
        /// <remarks/>
        MobileNetworkRadioEncryption,
        
        /// <remarks/>
        PSTN,
        
        /// <remarks/>
        SSL,
        
        /// <remarks/>
        WTLS,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("SharedSecretChallengeResponse", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class SharedSecretChallengeResponseType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string methodField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SharedSecretChallengeResponseType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SharedSecretChallengeResponseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SharedSecretChallengeResponseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SharedSecretChallengeResponseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SharedSecretChallengeResponseType obj, out System.Exception exception) {
            exception = null;
            obj = default(SharedSecretChallengeResponseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SharedSecretChallengeResponseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SharedSecretChallengeResponseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SharedSecretChallengeResponseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("DigSig", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class PublicKeyType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string keyValidationField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string keyValidation {
            get {
                return this.keyValidationField;
            }
            set {
                this.keyValidationField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PublicKeyType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PublicKeyType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PublicKeyType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PublicKeyType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PublicKeyType obj, out System.Exception exception) {
            exception = null;
            obj = default(PublicKeyType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PublicKeyType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PublicKeyType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PublicKeyType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("Authenticator", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class AuthenticatorBaseType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] previousSessionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] resumeSessionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType digSigField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PasswordType passwordField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RestrictedPasswordType restrictedPasswordField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] zeroKnowledgeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SharedSecretChallengeResponseType sharedSecretChallengeResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] sharedSecretDynamicPlaintextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] iPAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricDecryptionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricKeyAgreementField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] subscriberLineNumberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] userSuffixField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] previousSession1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] resumeSession1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType digSig1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PasswordType password1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RestrictedPasswordType restrictedPassword1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] zeroKnowledge1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SharedSecretChallengeResponseType sharedSecretChallengeResponse1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] sharedSecretDynamicPlaintext1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] iPAddress1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricDecryption1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricKeyAgreement1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] subscriberLineNumber1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] userSuffix1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] PreviousSession {
            get {
                return this.previousSessionField;
            }
            set {
                this.previousSessionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ResumeSession {
            get {
                return this.resumeSessionField;
            }
            set {
                this.resumeSessionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PublicKeyType DigSig {
            get {
                return this.digSigField;
            }
            set {
                this.digSigField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PasswordType Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public RestrictedPasswordType RestrictedPassword {
            get {
                return this.restrictedPasswordField;
            }
            set {
                this.restrictedPasswordField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ZeroKnowledge {
            get {
                return this.zeroKnowledgeField;
            }
            set {
                this.zeroKnowledgeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public SharedSecretChallengeResponseType SharedSecretChallengeResponse {
            get {
                return this.sharedSecretChallengeResponseField;
            }
            set {
                this.sharedSecretChallengeResponseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SharedSecretDynamicPlaintext {
            get {
                return this.sharedSecretDynamicPlaintextField;
            }
            set {
                this.sharedSecretDynamicPlaintextField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public PublicKeyType AsymmetricDecryption {
            get {
                return this.asymmetricDecryptionField;
            }
            set {
                this.asymmetricDecryptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public PublicKeyType AsymmetricKeyAgreement {
            get {
                return this.asymmetricKeyAgreementField;
            }
            set {
                this.asymmetricKeyAgreementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=11)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SubscriberLineNumber {
            get {
                return this.subscriberLineNumberField;
            }
            set {
                this.subscriberLineNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=12)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] UserSuffix {
            get {
                return this.userSuffixField;
            }
            set {
                this.userSuffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("PreviousSession", Order=13)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] PreviousSession1 {
            get {
                return this.previousSession1Field;
            }
            set {
                this.previousSession1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("ResumeSession", Order=14)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ResumeSession1 {
            get {
                return this.resumeSession1Field;
            }
            set {
                this.resumeSession1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DigSig", Order=15)]
        public PublicKeyType DigSig1 {
            get {
                return this.digSig1Field;
            }
            set {
                this.digSig1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Password", Order=16)]
        public PasswordType Password1 {
            get {
                return this.password1Field;
            }
            set {
                this.password1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RestrictedPassword", Order=17)]
        public RestrictedPasswordType RestrictedPassword1 {
            get {
                return this.restrictedPassword1Field;
            }
            set {
                this.restrictedPassword1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("ZeroKnowledge", Order=18)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ZeroKnowledge1 {
            get {
                return this.zeroKnowledge1Field;
            }
            set {
                this.zeroKnowledge1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SharedSecretChallengeResponse", Order=19)]
        public SharedSecretChallengeResponseType SharedSecretChallengeResponse1 {
            get {
                return this.sharedSecretChallengeResponse1Field;
            }
            set {
                this.sharedSecretChallengeResponse1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("SharedSecretDynamicPlaintext", Order=20)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SharedSecretDynamicPlaintext1 {
            get {
                return this.sharedSecretDynamicPlaintext1Field;
            }
            set {
                this.sharedSecretDynamicPlaintext1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("IPAddress", Order=21)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] IPAddress1 {
            get {
                return this.iPAddress1Field;
            }
            set {
                this.iPAddress1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AsymmetricDecryption", Order=22)]
        public PublicKeyType AsymmetricDecryption1 {
            get {
                return this.asymmetricDecryption1Field;
            }
            set {
                this.asymmetricDecryption1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AsymmetricKeyAgreement", Order=23)]
        public PublicKeyType AsymmetricKeyAgreement1 {
            get {
                return this.asymmetricKeyAgreement1Field;
            }
            set {
                this.asymmetricKeyAgreement1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("SubscriberLineNumber", Order=24)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SubscriberLineNumber1 {
            get {
                return this.subscriberLineNumber1Field;
            }
            set {
                this.subscriberLineNumber1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("UserSuffix", Order=25)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] UserSuffix1 {
            get {
                return this.userSuffix1Field;
            }
            set {
                this.userSuffix1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension", Order=26)]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AuthenticatorBaseType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AuthenticatorBaseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AuthenticatorBaseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AuthenticatorBaseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AuthenticatorBaseType obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthenticatorBaseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AuthenticatorBaseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AuthenticatorBaseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AuthenticatorBaseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RestrictedPasswordType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("Password", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class PasswordType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private LengthType lengthField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AlphabetType alphabetField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Generation generationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string externalVerificationField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LengthType Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        public AlphabetType Alphabet {
            get {
                return this.alphabetField;
            }
            set {
                this.alphabetField = value;
            }
        }
        
        public Generation Generation {
            get {
                return this.generationField;
            }
            set {
                this.generationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string ExternalVerification {
            get {
                return this.externalVerificationField;
            }
            set {
                this.externalVerificationField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PasswordType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PasswordType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PasswordType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PasswordType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PasswordType obj, out System.Exception exception) {
            exception = null;
            obj = default(PasswordType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PasswordType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PasswordType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PasswordType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RestrictedLengthType))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("Length", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class LengthType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string minField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string maxField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string min {
            get {
                return this.minField;
            }
            set {
                this.minField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string max {
            get {
                return this.maxField;
            }
            set {
                this.maxField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LengthType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LengthType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LengthType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LengthType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LengthType obj, out System.Exception exception) {
            exception = null;
            obj = default(LengthType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LengthType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LengthType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LengthType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    public partial class RestrictedLengthType : LengthType {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RestrictedLengthType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RestrictedLengthType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RestrictedLengthType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RestrictedLengthType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RestrictedLengthType obj, out System.Exception exception) {
            exception = null;
            obj = default(RestrictedLengthType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RestrictedLengthType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RestrictedLengthType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RestrictedLengthType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("Alphabet", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class AlphabetType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string requiredCharsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string excludedCharsField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string caseField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string requiredChars {
            get {
                return this.requiredCharsField;
            }
            set {
                this.requiredCharsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string excludedChars {
            get {
                return this.excludedCharsField;
            }
            set {
                this.excludedCharsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @case {
            get {
                return this.caseField;
            }
            set {
                this.caseField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AlphabetType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AlphabetType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AlphabetType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AlphabetType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AlphabetType obj, out System.Exception exception) {
            exception = null;
            obj = default(AlphabetType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AlphabetType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AlphabetType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AlphabetType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    /// <summary>
    /// Indicates whether the password was chosen by the
    /// Principal or auto-supplied by the Authentication Authority.
    /// principalchosen - the Principal is allowed to choose
    /// the value of the password. This is true even if
    /// the initial password is chosen at random by the UA or
    /// the IdP and the Principal is then free to change
    /// the password.
    /// automatic - the password is chosen by the UA or the
    /// IdP to be cryptographically strong in some sense,
    /// or to satisfy certain password rules, and that the
    /// Principal is not free to change it or to choose a new password.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class Generation {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GenerationMechanism mechanismField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public GenerationMechanism mechanism {
            get {
                return this.mechanismField;
            }
            set {
                this.mechanismField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Generation));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Generation object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Generation object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Generation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Generation obj, out System.Exception exception) {
            exception = null;
            obj = default(Generation);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Generation obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Generation Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Generation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    public enum GenerationMechanism {
        
        /// <remarks/>
        principalchosen,
        
        /// <remarks/>
        automatic,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("RestrictedPassword", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class RestrictedPasswordType : PasswordType {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RestrictedPasswordType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RestrictedPasswordType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RestrictedPasswordType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RestrictedPasswordType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RestrictedPasswordType obj, out System.Exception exception) {
            exception = null;
            obj = default(RestrictedPasswordType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RestrictedPasswordType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RestrictedPasswordType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RestrictedPasswordType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("TimeSyncToken", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class TimeSyncTokenType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private DeviceTypeType deviceTypeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string seedLengthField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private booleanType deviceInHandField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public DeviceTypeType DeviceType {
            get {
                return this.deviceTypeField;
            }
            set {
                this.deviceTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string SeedLength {
            get {
                return this.seedLengthField;
            }
            set {
                this.seedLengthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public booleanType DeviceInHand {
            get {
                return this.deviceInHandField;
            }
            set {
                this.deviceInHandField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TimeSyncTokenType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TimeSyncTokenType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TimeSyncTokenType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TimeSyncTokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TimeSyncTokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(TimeSyncTokenType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TimeSyncTokenType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TimeSyncTokenType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TimeSyncTokenType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    public enum DeviceTypeType {
        
        /// <remarks/>
        hardware,
        
        /// <remarks/>
        software,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    public enum booleanType {
        
        /// <remarks/>
        @true,
        
        /// <remarks/>
        @false,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("Token", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class TokenType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TimeSyncTokenType timeSyncTokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public TimeSyncTokenType TimeSyncToken {
            get {
                return this.timeSyncTokenField;
            }
            set {
                this.timeSyncTokenField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TokenType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TokenType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TokenType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TokenType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TokenType obj, out System.Exception exception) {
            exception = null;
            obj = default(TokenType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TokenType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TokenType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TokenType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("PrincipalAuthenticationMechanism", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class PrincipalAuthenticationMechanismType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PasswordType passwordField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RestrictedPasswordType restrictedPasswordField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private TokenType tokenField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] smartcardField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ActivationPinType activationPinField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string preauthField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PasswordType Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        public RestrictedPasswordType RestrictedPassword {
            get {
                return this.restrictedPasswordField;
            }
            set {
                this.restrictedPasswordField = value;
            }
        }
        
        public TokenType Token {
            get {
                return this.tokenField;
            }
            set {
                this.tokenField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] Smartcard {
            get {
                return this.smartcardField;
            }
            set {
                this.smartcardField = value;
            }
        }
        
        public ActivationPinType ActivationPin {
            get {
                return this.activationPinField;
            }
            set {
                this.activationPinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string preauth {
            get {
                return this.preauthField;
            }
            set {
                this.preauthField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PrincipalAuthenticationMechanismType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PrincipalAuthenticationMechanismType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PrincipalAuthenticationMechanismType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PrincipalAuthenticationMechanismType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PrincipalAuthenticationMechanismType obj, out System.Exception exception) {
            exception = null;
            obj = default(PrincipalAuthenticationMechanismType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PrincipalAuthenticationMechanismType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PrincipalAuthenticationMechanismType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PrincipalAuthenticationMechanismType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("ActivationPin", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ActivationPinType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private LengthType lengthField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AlphabetType alphabetField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Generation generationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ActivationLimitType activationLimitField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public LengthType Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        public AlphabetType Alphabet {
            get {
                return this.alphabetField;
            }
            set {
                this.alphabetField = value;
            }
        }
        
        public Generation Generation {
            get {
                return this.generationField;
            }
            set {
                this.generationField = value;
            }
        }
        
        public ActivationLimitType ActivationLimit {
            get {
                return this.activationLimitField;
            }
            set {
                this.activationLimitField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationPinType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationPinType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationPinType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationPinType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationPinType obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationPinType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationPinType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationPinType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationPinType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("ActivationLimit", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ActivationLimitType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ActivationLimitDuration", typeof(ActivationLimitDurationType))]
        [System.Xml.Serialization.XmlElementAttribute("ActivationLimitSession", typeof(ActivationLimitSessionType))]
        [System.Xml.Serialization.XmlElementAttribute("ActivationLimitUsages", typeof(ActivationLimitUsagesType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationLimitType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationLimitType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationLimitType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationLimitType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationLimitType obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationLimitType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationLimitType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationLimitType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationLimitType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("ActivationLimitDuration", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ActivationLimitDurationType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string durationField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="duration")]
        public string duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationLimitDurationType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationLimitDurationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationLimitDurationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationLimitDurationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationLimitDurationType obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationLimitDurationType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationLimitDurationType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationLimitDurationType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationLimitDurationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("ActivationLimitSession", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ActivationLimitSessionType {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationLimitSessionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationLimitSessionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationLimitSessionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationLimitSessionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationLimitSessionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationLimitSessionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationLimitSessionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationLimitSessionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationLimitSessionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("ActivationLimitUsages", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ActivationLimitUsagesType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string numberField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationLimitUsagesType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationLimitUsagesType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationLimitUsagesType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationLimitUsagesType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationLimitUsagesType obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationLimitUsagesType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationLimitUsagesType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationLimitUsagesType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationLimitUsagesType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("AuthnMethod", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class AuthnMethodBaseType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PrincipalAuthenticationMechanismType principalAuthenticationMechanismField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AuthenticatorBaseType authenticatorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private AuthenticatorTransportProtocolType authenticatorTransportProtocolField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public PrincipalAuthenticationMechanismType PrincipalAuthenticationMechanism {
            get {
                return this.principalAuthenticationMechanismField;
            }
            set {
                this.principalAuthenticationMechanismField = value;
            }
        }
        
        public AuthenticatorBaseType Authenticator {
            get {
                return this.authenticatorField;
            }
            set {
                this.authenticatorField = value;
            }
        }
        
        public AuthenticatorTransportProtocolType AuthenticatorTransportProtocol {
            get {
                return this.authenticatorTransportProtocolField;
            }
            set {
                this.authenticatorTransportProtocolField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AuthnMethodBaseType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AuthnMethodBaseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AuthnMethodBaseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AuthnMethodBaseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AuthnMethodBaseType obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthnMethodBaseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AuthnMethodBaseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AuthnMethodBaseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AuthnMethodBaseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("SecurityAudit", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class SecurityAuditType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] switchAuditField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SwitchAudit {
            get {
                return this.switchAuditField;
            }
            set {
                this.switchAuditField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SecurityAuditType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SecurityAuditType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SecurityAuditType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SecurityAuditType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SecurityAuditType obj, out System.Exception exception) {
            exception = null;
            obj = default(SecurityAuditType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SecurityAuditType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SecurityAuditType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SecurityAuditType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("OperationalProtection", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class OperationalProtectionType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SecurityAuditType securityAuditField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] deactivationCallCenterField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public SecurityAuditType SecurityAudit {
            get {
                return this.securityAuditField;
            }
            set {
                this.securityAuditField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] DeactivationCallCenter {
            get {
                return this.deactivationCallCenterField;
            }
            set {
                this.deactivationCallCenterField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OperationalProtectionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OperationalProtectionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OperationalProtectionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OperationalProtectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OperationalProtectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(OperationalProtectionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OperationalProtectionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OperationalProtectionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OperationalProtectionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("SecretKeyProtection", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class SecretKeyProtectionType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private KeyActivationType keyActivationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private KeyStorageType keyStorageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public KeyActivationType KeyActivation {
            get {
                return this.keyActivationField;
            }
            set {
                this.keyActivationField = value;
            }
        }
        
        public KeyStorageType KeyStorage {
            get {
                return this.keyStorageField;
            }
            set {
                this.keyStorageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SecretKeyProtectionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SecretKeyProtectionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SecretKeyProtectionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SecretKeyProtectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SecretKeyProtectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(SecretKeyProtectionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SecretKeyProtectionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SecretKeyProtectionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SecretKeyProtectionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("KeyActivation", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class KeyActivationType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ActivationPinType activationPinField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public ActivationPinType ActivationPin {
            get {
                return this.activationPinField;
            }
            set {
                this.activationPinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(KeyActivationType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current KeyActivationType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an KeyActivationType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output KeyActivationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out KeyActivationType obj, out System.Exception exception) {
            exception = null;
            obj = default(KeyActivationType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out KeyActivationType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static KeyActivationType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((KeyActivationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("KeyStorage", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class KeyStorageType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private mediumType mediumField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public mediumType medium {
            get {
                return this.mediumField;
            }
            set {
                this.mediumField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(KeyStorageType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current KeyStorageType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an KeyStorageType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output KeyStorageType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out KeyStorageType obj, out System.Exception exception) {
            exception = null;
            obj = default(KeyStorageType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out KeyStorageType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static KeyStorageType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((KeyStorageType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    public enum mediumType {
        
        /// <remarks/>
        memory,
        
        /// <remarks/>
        smartcard,
        
        /// <remarks/>
        token,
        
        /// <remarks/>
        MobileDevice,
        
        /// <remarks/>
        MobileAuthCard,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("KeySharing", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class KeySharingType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private bool sharingField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool sharing {
            get {
                return this.sharingField;
            }
            set {
                this.sharingField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(KeySharingType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current KeySharingType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an KeySharingType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output KeySharingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out KeySharingType obj, out System.Exception exception) {
            exception = null;
            obj = default(KeySharingType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out KeySharingType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static KeySharingType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((KeySharingType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("PrivateKeyProtection", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class PrivateKeyProtectionType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private KeyActivationType keyActivationField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private KeyStorageType keyStorageField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private KeySharingType keySharingField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public KeyActivationType KeyActivation {
            get {
                return this.keyActivationField;
            }
            set {
                this.keyActivationField = value;
            }
        }
        
        public KeyStorageType KeyStorage {
            get {
                return this.keyStorageField;
            }
            set {
                this.keyStorageField = value;
            }
        }
        
        public KeySharingType KeySharing {
            get {
                return this.keySharingField;
            }
            set {
                this.keySharingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PrivateKeyProtectionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PrivateKeyProtectionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PrivateKeyProtectionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PrivateKeyProtectionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PrivateKeyProtectionType obj, out System.Exception exception) {
            exception = null;
            obj = default(PrivateKeyProtectionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PrivateKeyProtectionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PrivateKeyProtectionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PrivateKeyProtectionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("TechnicalProtection", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class TechnicalProtectionBaseType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private object itemField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("PrivateKeyProtection", typeof(PrivateKeyProtectionType))]
        [System.Xml.Serialization.XmlElementAttribute("SecretKeyProtection", typeof(SecretKeyProtectionType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TechnicalProtectionBaseType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TechnicalProtectionBaseType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TechnicalProtectionBaseType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TechnicalProtectionBaseType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TechnicalProtectionBaseType obj, out System.Exception exception) {
            exception = null;
            obj = default(TechnicalProtectionBaseType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TechnicalProtectionBaseType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TechnicalProtectionBaseType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TechnicalProtectionBaseType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("GoverningAgreementRef", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class GoverningAgreementRefType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string governingAgreementRefField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        public string governingAgreementRef {
            get {
                return this.governingAgreementRefField;
            }
            set {
                this.governingAgreementRefField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GoverningAgreementRefType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GoverningAgreementRefType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GoverningAgreementRefType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GoverningAgreementRefType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GoverningAgreementRefType obj, out System.Exception exception) {
            exception = null;
            obj = default(GoverningAgreementRefType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GoverningAgreementRefType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GoverningAgreementRefType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GoverningAgreementRefType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    public enum nymType {
        
        /// <remarks/>
        anonymity,
        
        /// <remarks/>
        verinymity,
        
        /// <remarks/>
        pseudonymity,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("ComplexAuthenticator", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class ComplexAuthenticatorType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] previousSessionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] resumeSessionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType digSigField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PasswordType passwordField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RestrictedPasswordType restrictedPasswordField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] zeroKnowledgeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SharedSecretChallengeResponseType sharedSecretChallengeResponseField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] sharedSecretDynamicPlaintextField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] iPAddressField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricDecryptionField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricKeyAgreementField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] subscriberLineNumberField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] userSuffixField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] previousSession1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] resumeSession1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType digSig1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PasswordType password1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private RestrictedPasswordType restrictedPassword1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] zeroKnowledge1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private SharedSecretChallengeResponseType sharedSecretChallengeResponse1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] sharedSecretDynamicPlaintext1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] iPAddress1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricDecryption1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private PublicKeyType asymmetricKeyAgreement1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] subscriberLineNumber1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] userSuffix1Field;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private ExtensionType[] extensionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] PreviousSession {
            get {
                return this.previousSessionField;
            }
            set {
                this.previousSessionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ResumeSession {
            get {
                return this.resumeSessionField;
            }
            set {
                this.resumeSessionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public PublicKeyType DigSig {
            get {
                return this.digSigField;
            }
            set {
                this.digSigField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public PasswordType Password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public RestrictedPasswordType RestrictedPassword {
            get {
                return this.restrictedPasswordField;
            }
            set {
                this.restrictedPasswordField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ZeroKnowledge {
            get {
                return this.zeroKnowledgeField;
            }
            set {
                this.zeroKnowledgeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public SharedSecretChallengeResponseType SharedSecretChallengeResponse {
            get {
                return this.sharedSecretChallengeResponseField;
            }
            set {
                this.sharedSecretChallengeResponseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=7)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SharedSecretDynamicPlaintext {
            get {
                return this.sharedSecretDynamicPlaintextField;
            }
            set {
                this.sharedSecretDynamicPlaintextField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=8)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] IPAddress {
            get {
                return this.iPAddressField;
            }
            set {
                this.iPAddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public PublicKeyType AsymmetricDecryption {
            get {
                return this.asymmetricDecryptionField;
            }
            set {
                this.asymmetricDecryptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public PublicKeyType AsymmetricKeyAgreement {
            get {
                return this.asymmetricKeyAgreementField;
            }
            set {
                this.asymmetricKeyAgreementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=11)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SubscriberLineNumber {
            get {
                return this.subscriberLineNumberField;
            }
            set {
                this.subscriberLineNumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=12)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] UserSuffix {
            get {
                return this.userSuffixField;
            }
            set {
                this.userSuffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("PreviousSession", Order=13)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] PreviousSession1 {
            get {
                return this.previousSession1Field;
            }
            set {
                this.previousSession1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("ResumeSession", Order=14)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ResumeSession1 {
            get {
                return this.resumeSession1Field;
            }
            set {
                this.resumeSession1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("DigSig", Order=15)]
        public PublicKeyType DigSig1 {
            get {
                return this.digSig1Field;
            }
            set {
                this.digSig1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Password", Order=16)]
        public PasswordType Password1 {
            get {
                return this.password1Field;
            }
            set {
                this.password1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("RestrictedPassword", Order=17)]
        public RestrictedPasswordType RestrictedPassword1 {
            get {
                return this.restrictedPassword1Field;
            }
            set {
                this.restrictedPassword1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("ZeroKnowledge", Order=18)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] ZeroKnowledge1 {
            get {
                return this.zeroKnowledge1Field;
            }
            set {
                this.zeroKnowledge1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("SharedSecretChallengeResponse", Order=19)]
        public SharedSecretChallengeResponseType SharedSecretChallengeResponse1 {
            get {
                return this.sharedSecretChallengeResponse1Field;
            }
            set {
                this.sharedSecretChallengeResponse1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("SharedSecretDynamicPlaintext", Order=20)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SharedSecretDynamicPlaintext1 {
            get {
                return this.sharedSecretDynamicPlaintext1Field;
            }
            set {
                this.sharedSecretDynamicPlaintext1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("IPAddress", Order=21)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] IPAddress1 {
            get {
                return this.iPAddress1Field;
            }
            set {
                this.iPAddress1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AsymmetricDecryption", Order=22)]
        public PublicKeyType AsymmetricDecryption1 {
            get {
                return this.asymmetricDecryption1Field;
            }
            set {
                this.asymmetricDecryption1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("AsymmetricKeyAgreement", Order=23)]
        public PublicKeyType AsymmetricKeyAgreement1 {
            get {
                return this.asymmetricKeyAgreement1Field;
            }
            set {
                this.asymmetricKeyAgreement1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("SubscriberLineNumber", Order=24)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] SubscriberLineNumber1 {
            get {
                return this.subscriberLineNumber1Field;
            }
            set {
                this.subscriberLineNumber1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("UserSuffix", Order=25)]
        [System.Xml.Serialization.XmlArrayItemAttribute("Extension", IsNullable=false)]
        public ExtensionType[] UserSuffix1 {
            get {
                return this.userSuffix1Field;
            }
            set {
                this.userSuffix1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Extension", Order=26)]
        public ExtensionType[] Extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ComplexAuthenticatorType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ComplexAuthenticatorType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ComplexAuthenticatorType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ComplexAuthenticatorType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ComplexAuthenticatorType obj, out System.Exception exception) {
            exception = null;
            obj = default(ComplexAuthenticatorType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ComplexAuthenticatorType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ComplexAuthenticatorType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ComplexAuthenticatorType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Xsd2Code", "3.4.0.19522")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:oasis:names:tc:SAML:2.0:ac")]
    [System.Xml.Serialization.XmlRootAttribute("GoverningAgreements", Namespace="urn:oasis:names:tc:SAML:2.0:ac", IsNullable=false)]
    public partial class GoverningAgreementsType {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private GoverningAgreementRefType[] governingAgreementRefField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("GoverningAgreementRef")]
        public GoverningAgreementRefType[] GoverningAgreementRef {
            get {
                return this.governingAgreementRefField;
            }
            set {
                this.governingAgreementRefField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(GoverningAgreementsType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GoverningAgreementsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(System.Text.Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an GoverningAgreementsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output GoverningAgreementsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out GoverningAgreementsType obj, out System.Exception exception) {
            exception = null;
            obj = default(GoverningAgreementsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out GoverningAgreementsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static GoverningAgreementsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((GoverningAgreementsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        #endregion
    }
}

#pragma warning restore 1591

